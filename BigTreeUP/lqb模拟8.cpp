/*问题描述
　　给定一个整数，对这个整数的一次转换是指将这个整数变为这个整数的所有数位上的非零数字的乘积。
　　例如，对 123456789 进行一次转换变为 1*2*3*4*5*6*7*8*9=362880，再进行一次转换变为 3*6*2*8*8=2304，再进行一次转换变为 2*3*4=24，再进行一次转换变为 8。
　　给定一个整数，请依次将转换过程中经历的每个整数输出，直到小于 10 。
输入格式
　　输入一行包含一个整数 n 。
输出格式
　　输出多行，每行包含一个整数。
样例输入
123456789
样例输出
362880
2304
24
8
评测用例规模与约定
　　对于 50% 的评测用例，1 <= n <= 10**9 （10的9次方）。
　　对于所有评测用例，1 <= n <= 10**18 （10的18次方）。*/
#include<stdio.h>
#include<string.h>
int main(){
	int n,n1;
	int s=1;
	int t,count;
	
	scanf("%d",&n);
	n1=n;
		
	while(n>=10){
		//初始化 
		n1=n;
		count=0;
		s=1;
		//判断现在的数字有几位 
		count=0;//初始化 
		while(n1!=0){
		n1=n1/10;
		count++;
	}
		//再计算下一个数的值 
		for(int i=0;i<count;i++){
		t=n%10;
		n=n/10;
		if(t!=0){
			s=s*t;
		}
	}
	printf("%d\n",s);
	n=s;
	}
	return 0;
}
